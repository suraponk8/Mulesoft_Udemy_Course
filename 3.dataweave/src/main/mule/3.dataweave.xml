<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd">
	<http:listener-config name="HTTP_Listener_config" doc:name="HTTP Listener config" doc:id="bbae23ba-10f2-46ab-9d91-0fe0b72b9ba8" >
		<http:listener-connection host="0.0.0.0" port="8081" />
	</http:listener-config>
	<flow name="dataweave_basics" doc:id="da47433a-440a-4dc6-b869-e668b3bf30d4" >
		<ee:transform doc:name="concatenate two strings into a single string" doc:id="9afe9a6b-416a-4d08-b5e4-d68fd9765d4e" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	"newString" : ("Hello " ++ " World")
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="transform json to xml" doc:id="c1d76a17-77d7-4a19-8b6a-ef266427778e" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/xml
---
{
	"newString" : ("Hello " ++ " World")
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="create a variable in dataweave" doc:id="a84a0e90-5689-4355-a74b-882b11e0ed12" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

var myVar = {
	"newString" : ("Hello " ++ " World")	
}

output application/json
---
myVar]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="use dataweave native functions" doc:id="dd1dde5e-da92-4398-8023-796711c5ea33" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

var  myVar = {
	"sum" : sum([1,1,2,3,4,3]),
	"avg" : avg([2,2,1,2,5,5]),
	"even" : isEven(4),
	"uppercase" : upper("Mulesoft"),
	"timestamp" : now()
	
	
}

output application/json
---
myVar]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="dataweave_files" doc:id="6a7177b8-6642-4cd2-9d88-2c47aff855a2" >
		<ee:transform doc:name="read content file from the classpath" doc:id="55eab0a8-8af1-4fbc-957e-7fbcaf3234f3" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
readUrl("classpath://peopleName.json")]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="create a metadata type and use it as a payyload" doc:id="da3e8986-e833-4308-9e30-ed200f19097e" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="dataweave_object_array" doc:id="1b02b7e8-da79-4cf2-95aa-474ffaa19ee3" >
		<ee:transform doc:name="map elements from an array into an object" doc:id="328e33fb-b446-44c1-9bbb-783863dca70a" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

var customArray = [
	"Mulesoft",
	"course",
	"fundamentals"
]
output application/json
---
customArray map ((item,index) ->
	index : item ++ "_" ++ index
)]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="pluck objects from an object into an array" doc:id="59145ceb-8cd0-4220-adb8-dd73466bee48" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

var customObj = {
	"0" : "Mulesoft",
	"1" : "course",
	"2" : "fundamentals"
}

output application/json
---
customObj pluck((value) ->
	value
)]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="filter an array and return only the matching items" doc:id="f96ebf4c-80a3-4343-b6a4-b8e223ff7356">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0

var customArray = [1,2,3,4,5,6,7,8,9,10]
output application/json
---
{
	"collection" :customArray filter((item,index) -> item > 6)
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="filter an object and return only the matching items" doc:id="81d99db9-2540-4381-b204-7361507de0e2">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0

var customObj = {
	"0" : "Mulesoft",
	"1" : "course",
	"2" : "fundamentals"
}


output application/json
---
{
	"collection" : customObj filterObject ((value,key) ->
		(key contains 1) and sizeOf(value) > 4
	)
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="dataweave_selectors_over_objects" doc:id="3e9352b0-b13c-4984-bbf2-b10474d9f6f0" >
		<ee:transform doc:name="single-value selector over an object" doc:id="bef7d9af-3294-4115-ba6e-d4d0ad28991c" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0



var customObj = {
	"people" : {
		"person" : {
			"name" : "John"
		},
		"person" : {
			"name" : "Mary"
		},
		"person" : {
			"name" : "Tim"
		},
		"person" : {
			"name" : "Ann"
		},
		"person" : {
			"name" : "Dora"
		}
	}
}


output application/json
---

/*
* selectors only return the value of the first matching key , even if the object contains multiple 
* matching keys
*/

customObj.people.person]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="multiple-value selector over an object" doc:id="4fe5d030-df69-4a60-8e4e-6a809c209e9e" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

var customObj = {
	"people" : {
		"person" : {
			"name" : "John"
		},
		"person" : {
			"name" : "Mary"
		},
		"person" : {
			"name" : "Tim"
		},
		"person" : {
			"name" : "Ann"
		},
		"person" : {
			"name" : "Dora"
		}
	}
}



output application/json
---

/*
 *  .* returns an array with all the whose key matches the expression
 * 
 */
 
customObj.people.*person]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="descendant-value selector over an object" doc:id="79ebe8db-ad5e-45f6-8f35-1d95cf14a3b3" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

var customObj = {
	"people" : {
		"person" : {
			"name" : "John",
			"address" : {
				"name" : "address1"
			}
		},
		"person" : {
			"name" : "Mary",
			"address" : {
				"name" : "address2"
			}
		},
		"person" : {
			"name" : "Tim",
			"address" : {
			"name" : "address3"
			}
		},
		"person" : {
			"name" : "Ann",	
			"address" : {
				"name" : "address4"
			}
		},
		"person" : {
			"name" : "Dora",	
			"address" : {
				"name" : "address5"
			}
		}
	}
}



output application/json
---


/*
 * .. retrieves the values of the all matching key-value
 * pairs in the sub-tree under the selected context
 * 
 * 
 */

customObj.people..name]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="key-value pair selector over an object" doc:id="5c620273-01b7-4060-89d2-7121e3f446a9" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

var customObj = {
	"people" : {
		"person" : {
			"name" : "John"
		},
		"person" : {
			"name" : "Mary"
		},
		"person" : {
			"name" : "Tim"
		},
		"person" : {
			"name" : "Ann"
		},
		"person" : {
			"name" : "Dora"
		}
	}
}

output application/json
---

/*
 * .& selector retrieves both the keys and values
 * of all matching key-pairs in the context
 * 
 */


customObj.people.*person.&name]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="index selector over an objext" doc:id="8d19d787-7d01-472c-a3ca-c9ec82a8b693" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
var customObj = {
	"people" : {
		"person" : {
			"name" : "John"
		},
		"person" : {
			"name" : "Mary"
		},
		"person" : {
			"name" : "Tim"
		},
		"person" : {
			"name" : "Ann"
		},
		"person" : {
			"name" : "Dora"
		}
	}
}


output application/json
---
/*
 * the selector returns the value of the key-value pair
 * at the specific
 */
customObj.people[2]]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="dataweave_selectors_over_string" doc:id="94409c1a-9cbf-4259-8c43-f127726978a0" >
		<ee:transform doc:name="index selector over a string" doc:id="7893067f-419a-4e87-ac09-586dcaf384fa" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
var customString = "Mulesoft"

output application/json
---

/*
 * the string is broken down into an array, 
 * where each character is an index
 */
customString [0]]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="range selector over a string" doc:id="7c703793-16a5-441e-ab80-1c6ee9454ec1" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

var customString = "Mulesoft"
output application/json
---
/*
 * limits the output to only the elements specified
 * by the range on that specified
 * 
 */
customString[0 to 3]]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="dataweave_lambdas_basics" doc:id="da619cff-e255-4cc1-9e4f-beb0559a565a" >
		<http:listener doc:name="HTTP POST" doc:id="0f4f4f3e-9688-4d71-9b62-f5b1769067ee" config-ref="HTTP_Listener_config" path="/lambdas" allowedMethods="POST"/>
		<ee:transform doc:name="declare and invoke a function" doc:id="ac560d3d-dbd0-4fec-8a59-da017647eecb" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

fun createString(obj) ={
	description: obj.field1 ++ " " ++ obj.field2 ++ " " ++ obj.field3
}

output application/json
---
{
	"root" : createString(payload)
	
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="Logger" doc:id="4b2c5236-37ac-41a4-8a9c-a379346aa316" message="#[payload]"/>
		<ee:transform doc:name="use named parameters in lambda" doc:id="7696718b-0548-4181-80ba-231e47c69756" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
var customArray = [1,2,3,4,5,6]
output application/json
---
{
	"collection" : customArray map ((number) ->
		(number * 100)
	)
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="Logger" doc:id="0e6d2142-6ef7-4fe7-b486-744a37692ff9" message="#[payload]"/>
		<ee:transform doc:name="use lambda default argument values" doc:id="234db788-950e-4596-b706-137109b2e391" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

var customArray = ["Mulesoft","course","fundamentals"]

output application/json
---
{
	"collection" : customArray map (
		//$$: index , $: item
		"$$" : $
	)
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="dataweave_lambdas_intermediate" doc:id="b4c1e51a-fda1-4bf5-83bc-174795ce5a19" >
		<ee:transform doc:name="maps and merges fields from items in separate arrays" doc:id="a4b81aad-5ad2-4688-ba43-e94e6addc7f8" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0

var books =[
	{
		bookId : 101,
		title: "mulesoft course",
		price: "20.00"
		
	},
	{
		bookId : 202,
		title: "mulesoft fundamentals",
		price: "30.00"
		
	},
	{
		bookId : 303,
		title: "mulesoft essentials",
		price: "12.00"
		
	}
	
]

var authors =[
	{
		bookId: 101,
		author: "surapon kunsri"	
	},
	{
		bookId: 202,
		author: "tiger wood"	
	},
	{
		bookId: 303,
		author: "dollar money"	
	}
	
]
output application/json
---
{
	"booksResult" : books map ((item , index) ->
	  // create a dynamic variable at the map level	
	  using(id = item.bookId){
	  	"id" : id,
	  	"topic" : item.title,
	  	"cost" : item.price,
	    //lets attach the author to the book object 
	    (
	    	authors filter ($.*bookId contains id) map(item) ->
	  		{
	  			// $.*bookId refers to author array
	  			"author" : item.author
	  		}
	    )
	  }
		
	)
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="returns only the values of matching keys within an object" doc:id="56988766-8c9a-4867-8a4c-930bfcd003a4" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0


var booksList =[
	book:{
		bookId : 101,
		title: "mulesoft course",
		price: "20.00"
		
	},
	book:{
		bookId : 202,
		title: "mulesoft fundamentals",
		price: "30.00"
		
	},
	book:{
		bookId : 303,
		title: "mulesoft essentials",
		price: "12.00"
		
	}
	
]



output application/json
---
// lets get all the prices > 15.00
"prices" : booksList.book.*price[?($>15)]
//? - validates if the key "price" exists
// and if exists, check if value > 15]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
</mule>
